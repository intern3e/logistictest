<!DOCTYPE html>
<html lang="th">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏±‡∏î‡∏™‡πà‡∏á</title>
  <style>
    body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; background-color: #f9f9f9; margin: 0; padding: 0; }
    .header { background-color: #2d3e50; color: white; padding: 15px 20px; display: flex; justify-content: space-between; align-items: center; flex-wrap: wrap; }
    .header h2 { margin: 0; }
    .buttons { display: flex; gap: 15px; align-items: center; }
    .buttons a { color: black; text-decoration: none; font-weight: bold; padding: 8px 14px; border-radius: 6px; background-color: #ffc107; transition: background-color 0.2s ease; }
    .buttons a:hover { background-color: #e0a800; }
    .notification-icon img { width: 24px; height: 24px; }
    .notification-badge { position: relative; top: -10px; right: 10px; background-color: red; color: white; border-radius: 50%; padding: 2px 6px; font-size: 12px; }
    .filter-container { padding: 15px 20px; background-color: #fff; border-bottom: 1px solid #ccc; }
    .search-box { padding: 10px 20px; background-color: #f0f0f0; border-bottom: 1px solid #ddd; }
    #search-input { width: 100%; padding: 8px; border: 1px solid #ccc; border-radius: 6px; font-size: 14px; }
    .table-container { padding: 20px; overflow-x: auto; }
    table { width: 100%; border-collapse: collapse; font-size: 14px; background-color: white; }
    th, td { text-align: left; padding: 10px; border: 1px solid #ddd; vertical-align: top; }
    th { background-color: #007bff; color: white; font-weight: bold; }
    tr:nth-child(even) { background-color: #f2f2f2; }
  </style>
</head>
<body>
<div class="header">
  <h2>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏±‡∏î‡∏™‡πà‡∏á</h2>
  <div class="buttons">
    <span>üë§ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: {{ session('emp_name', 'Guest') }}</span>
    @csrf
    <a href="SOlist" class="btn btn-danger">üö™ ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å</a>
    <a href="alertsale" class="notification-icon" title="‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ô‡∏∞‡∏à‡πä‡∏∞" style="background-color: rgb(245, 245, 69); padding: 5px; border-radius: 5px;">
      <img src="https://cdn-icons-png.flaticon.com/512/2645/2645897.png" alt="‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô">
      <span class="notification-badge" id="alertBadge">0</span>
    </a>
  </div>
</div>
<div class="filter-container">
  <form method="GET" action="{{ route('sale.dashboard') }}" class="filter-form" id="autoSearchForm">
    <label for="date">üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô / ‡∏ß‡∏±‡∏ô / ‡∏õ‡∏µ</label>
    <input type="date" id="date" name="date" value="{{ request('date', \Carbon\Carbon::today()->format('Y-m-d')) }}">
  </form>
</div>
<div class="search-box">
  <input type="text" id="search-input" placeholder=" ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ / ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà / ‡∏û‡∏¥‡∏Å‡∏±‡∏î" onkeyup="searchTable()">
</div>
<div class="table-container">
  @php
  // Zone A (‡∏Å‡∏£‡∏≠‡∏ö‡∏™‡∏µ‡πÅ‡∏î‡∏á) - ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö
  $zoneALatMin = 13.083795;
  $zoneALatMax = 13.123811;
  $zoneALongMin = 100.9167453;
  $zoneALongMax = 100.954473;

  // Zone B (‡∏à‡∏≤‡∏Å 4 ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏´‡πâ)
  $zoneBLatMin = 12.9396116;
  $zoneBLatMax = 13.0748591;
  $zoneBLongMin = 101.0855834;
  $zoneBLongMax = 101.21371836789208;

  $grouped = [
    'Zone A (‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏Å‡∏£‡∏≠‡∏ö‡∏™‡∏µ‡πÅ‡∏î‡∏á)' => [],
    'Zone B (‡∏Å‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á)' => [],
    '‡∏≠‡∏∑‡πà‡∏ô ‡πÜ' => []
  ];

  foreach ($bill as $item) {
    if (!empty($item->customer_la_long) && str_contains($item->customer_la_long, ',')) {
      [$lat, $long] = explode(',', $item->customer_la_long);
      $lat = floatval(trim($lat));
      $long = floatval(trim($long));

      if ($lat >= $zoneALatMin && $lat <= $zoneALatMax && $long >= $zoneALongMin && $long <= $zoneALongMax) {
        $grouped['Zone A (‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏Å‡∏£‡∏≠‡∏ö‡∏™‡∏µ‡πÅ‡∏î‡∏á)'][] = $item;
      } elseif ($lat >= $zoneBLatMin && $lat <= $zoneBLatMax && $long >= $zoneBLongMin && $long <= $zoneBLongMax) {
        $grouped['Zone B (‡∏Å‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á)'][] = $item;
      } else {
        $grouped['‡∏≠‡∏∑‡πà‡∏ô ‡πÜ'][] = $item;
      }
    } else {
      $grouped['‡∏≠‡∏∑‡πà‡∏ô ‡πÜ'][] = $item;
    }
  }
  @endphp
</div>


  @foreach($grouped as $zoneName => $items)
  <h3>{{ $zoneName }}</h3>
  <table>
    <thead>
      <tr>
        <th>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤</th>
      </tr>
    </thead>
    <tbody>
      @forelse($items as $index => $item)
        <tr>
          <td>
            {{ $item->customer_name }}<br>
            {{ $item->customer_address }}<br>
            <span class="latlong" id="resolved-address-{{ $loop->index }}" data-latlong="{{ $item->customer_la_long }}">
              üìç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà...
            </span>
          </td>
        </tr>
      @empty
        <tr><td>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</td></tr>
      @endforelse
    </tbody>
  </table>
  @endforeach
</div>

<script>
async function reverseGeocodeOSM(latlong, elementId) {
  const [lat, lon] = latlong.split(',').map(val => val.trim());
  const url = `https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lon}&zoom=20&addressdetails=1`;

  try {
    const response = await fetch(url, {
      headers: {
        'User-Agent': 'MyDeliveryApp/1.0',
        'Accept-Language': 'th'
      }
    });
    const data = await response.json();
    const addr = data.address;

    // ‚öôÔ∏è ‡πÉ‡∏ä‡πâ fallback ‡∏´‡∏•‡∏≤‡∏¢‡∏ä‡∏±‡πâ‡∏ô
    const house = addr.house_number || addr.building || '';
    const road = addr.road || addr.footway || addr.path || addr.residential || addr.street || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ñ‡∏ô‡∏ô';
    const moo = addr.quarter || addr.neighbourhood || addr.village || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏°‡∏π‡πà';
    const subdistrict = addr.subdistrict || addr.suburb || addr.town || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏≥‡∏ö‡∏•';
    const district = addr.city_district || addr.district || addr.county || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏≠‡∏≥‡πÄ‡∏†‡∏≠';
    const province = addr.state || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î';
    const postcode = addr.postcode || '';

    // üõ†Ô∏è ‡∏£‡∏ß‡∏°‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà + ‡∏ñ‡∏ô‡∏ô
    const houseRoad = (house ? `‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà ${house}, ` : '') + (road !== '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ñ‡∏ô‡∏ô' ? `‡∏ñ‡∏ô‡∏ô${road}, ` : '');
    const mooText = (moo !== '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏°‡∏π‡πà' && !moo.includes('‡∏´‡∏°‡∏π‡πà')) ? `‡∏´‡∏°‡∏π‡πà ${moo}, ` : (moo !== '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏°‡∏π‡πà' ? `${moo}, ` : '');
    const fullAddress = `üìå ${houseRoad}${mooText}‡∏ï.${subdistrict}, ‡∏≠.${district}, ‡∏à.${province} ${postcode}`;

    document.getElementById(elementId).textContent = fullAddress;
  } catch (e) {
    console.error('‚ùå Reverse geocode failed:', e);
    document.getElementById(elementId).textContent = 'üìå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà';
  }
}

// üîÅ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å .latlong ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à
document.addEventListener("DOMContentLoaded", () => {
  document.querySelectorAll('.latlong').forEach((el) => {
    const latlong = el.getAttribute('data-latlong');
    const elementId = el.id;
    if (latlong && elementId) {
      reverseGeocodeOSM(latlong, elementId);
    }
  });
});
</script>


</body>
</html>
